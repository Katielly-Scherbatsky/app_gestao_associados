<div class="aviso-section">
  <div class="aviso-container">
    <div class="title-section">
      <div class="aviso-title">Solicitações</div>
      <div class="subtitle">Confira as solicitações já cadastradas</div>
      <div class="button-container" id="novo-solicitacao-container" style="margin-top: 20px;">
        <button id="open-modal" class="submit-button">Nova Solicitação</button>
      </div>
      <div class="tab-links" style="margin-top: 20px;">
        <button id="tab-minhas" class="tab active">Minhas Solicitações</button>
        <button id="tab-todas" class="tab">Todas as Solicitações</button>
      </div>
    </div>
    <div id="content-minhas" class="solicitacoes-tab">
      <table id="minhas-solicitacoes-table">
        <thead>
          <tr>
            <th>#</th>
            <th>Descrição</th>
            <th>Tipo</th>
            <th>Status</th>
            <th style="width: 90px; text-align: center;">Ações</th>
          </tr>
        </thead>
        <tbody id="minhas-solicitacoes-list">
        </tbody>
      </table>
    </div>
    <div id="content-todas" class="solicitacoes-tab" style="display: none;">
      <table id="todas-solicitacoes-table">
        <thead>
          <tr>
            <th>#</th>
            <th>Descrição</th>
            <th>Tipo</th>
            <th>Status</th>
            <th>Associado</th>
          </tr>
        </thead>
        <tbody id="todas-solicitacoes-list">
        </tbody>
      </table>
    </div>
  </div>
</div>

<div class="modal" id="modal-new-solicitacao" style="display: none;">
  <div class="modal-content">
    <span class="close-button" id="close-modal">&times;</span>
    <div class="title-section">
      <div class="aviso-title" id="modal-title">Nova Solicitação</div>
      <div class="subtitle">Preencha os dados da solicitação</div>
    </div>
    <form id="cadastro-solicitacao-form" class="form-section">
      <div class="form-container">
        <div class="input-item">
          <label for="descricao">Descrição</label>
          <input id="descricao" class="input-field" type="text" placeholder="Descrição da solicitação" required>
        </div>
        <div class="input-item">
          <label for="tipo">Tipo</label>
          <input id="tipo" class="input-field" type="text" placeholder="Tipo da solicitação" required>
        </div>
        <div class="input-item">
          <label for="status">Status</label>
          <select id="status" class="input-field" required>
            <option value="">Selecione o status</option>
            <option value="Aberta">Aberta</option>
            <option value="Em Andamento">Em Andamento</option>
            <option value="Concluída">Concluída</option>
          </select>
        </div>
      </div>
      <div class="button-container">
        <button type="submit" class="submit-button" id="salvar-solicitacao-btn">Cadastrar Solicitação</button>
      </div>
    </form>
  </div>
</div>

<script>
  let editSolicitacaoId = null;

  document.addEventListener("DOMContentLoaded", async function () {
    const token = localStorage.getItem("token");
    const currentUserId = localStorage.getItem("userId");
    const userType = localStorage.getItem("userType");
    console.log("UserType:", userType);

    async function fetchSolicitacoes() {
      try {
        const response = await fetch("/solicitacoes", {
          headers: {
            "Authorization": `Bearer ${token}`
          }
        });
        if (!response.ok) {
          throw new Error("Erro ao buscar solicitações");
        }
        return await response.json();
      } catch (error) {
        console.error(error);
        return [];
      }
    }

    async function renderMinhasSolicitacoes() {
      const solicitacoes = await fetchSolicitacoes();
      const minhas = solicitacoes.filter(s => String(s.associadoId) === currentUserId);
      const tbody = document.getElementById("minhas-solicitacoes-list");
      tbody.innerHTML = "";
      if (minhas.length === 0) {
        const tr = document.createElement("tr");
        const td = document.createElement("td");
        td.setAttribute("colspan", "5");
        td.className = "no-records";
        td.textContent = "Sem registros";
        tr.appendChild(td);
        tbody.appendChild(tr);
      } else {
        minhas.forEach(s => {
          const tr = document.createElement("tr");

          const tdId = document.createElement("td");
          tdId.textContent = s.id;
          tr.appendChild(tdId);

          const tdDescricao = document.createElement("td");
          tdDescricao.textContent = s.descricao;
          tr.appendChild(tdDescricao);

          const tdTipo = document.createElement("td");
          tdTipo.textContent = s.tipo;
          tr.appendChild(tdTipo);

          const tdStatus = document.createElement("td");
          tdStatus.textContent = s.status;
          tr.appendChild(tdStatus);

          const tdAcoes = document.createElement("td");
          if (String(s.associadoId) === currentUserId) {
            const btnEdit = document.createElement("button");
            btnEdit.className = "action-btn edit";
            btnEdit.innerHTML = '<i class="icon-edit"></i>';
            btnEdit.addEventListener("click", async function () {
              editSolicitacaoId = s.id;
              document.getElementById("modal-title").textContent = "Editar Solicitação";
              document.getElementById("salvar-solicitacao-btn").textContent = "Salvar Alterações";
              try {
                const response = await fetch(`/solicitacoes/${s.id}`, {
                  headers: {
                    "Authorization": `Bearer ${token}`
                  }
                });
                if (!response.ok) {
                  throw new Error("Erro ao buscar dados da solicitação");
                }
                const solicitacaoData = await response.json();
                document.getElementById("descricao").value = solicitacaoData.descricao || "";
                document.getElementById("tipo").value = solicitacaoData.tipo || "";
                document.getElementById("status").value = solicitacaoData.status || "";
                document.getElementById("modal-new-solicitacao").style.display = "flex";
              } catch (error) {
                alert("Erro ao carregar dados da solicitação: " + error.message);
              }
            });
            tdAcoes.appendChild(btnEdit);

            const btnDelete = document.createElement("button");
            btnDelete.className = "action-btn delete";
            btnDelete.innerHTML = '<i class="icon-trash"></i>';
            btnDelete.addEventListener("click", async function () {
              if (confirm("Deseja excluir esta solicitação?")) {
                try {
                  const response = await fetch(`/solicitacoes/${s.id}`, {
                    method: "DELETE",
                    headers: {
                      "Authorization": `Bearer ${token}`
                    }
                  });
                  if (response.ok) {
                    alert("Solicitação excluída com sucesso!");
                    await renderSolicitacoes();
                  } else {
                    alert("Erro ao excluir solicitação");
                  }
                } catch (error) {
                  alert("Erro: " + error.message);
                }
              }
            });
            tdAcoes.appendChild(btnDelete);
          }
          tr.appendChild(tdAcoes);
          tbody.appendChild(tr);
        });
      }
    }

    async function renderTodasSolicitacoes() {
      const solicitacoes = await fetchSolicitacoes();
      const tbody = document.getElementById("todas-solicitacoes-list");
      tbody.innerHTML = "";
      if (solicitacoes.length === 0) {
        const tr = document.createElement("tr");
        const td = document.createElement("td");
        td.setAttribute("colspan", "5");
        td.className = "no-records";
        td.textContent = "Sem registros";
        tr.appendChild(td);
        tbody.appendChild(tr);
      } else {
        solicitacoes.forEach(s => {
          const tr = document.createElement("tr");

          const tdId = document.createElement("td");
          tdId.textContent = s.id;
          tr.appendChild(tdId);

          const tdDescricao = document.createElement("td");
          tdDescricao.textContent = s.descricao;
          tr.appendChild(tdDescricao);

          const tdTipo = document.createElement("td");
          tdTipo.textContent = s.tipo;
          tr.appendChild(tdTipo);

          const tdStatus = document.createElement("td");
          tdStatus.textContent = s.status;
          tr.appendChild(tdStatus);

          const tdAssociado = document.createElement("td");
          tdAssociado.textContent = s.associado?.nome || s.associadoId;
          tr.appendChild(tdAssociado);

          tbody.appendChild(tr);
        });
      }
    }

    async function renderSolicitacoes() {
      if (userType === "2") {
        document.getElementById("tab-minhas").style.display = "block";
        document.getElementById("tab-todas").style.display = "block";
        document.getElementById("content-minhas").style.display = "block";
        document.getElementById("content-todas").style.display = "none";
        await renderMinhasSolicitacoes();
        await renderTodasSolicitacoes();
      } else if (userType === "1") {
        document.getElementById("tab-minhas").style.display = "none";
        document.getElementById("tab-todas").style.display = "none";
        document.getElementById("content-todas").style.display = "none";
        await renderMinhasSolicitacoes();
      } else {
        document.getElementById("tab-minhas").style.display = "block";
        document.getElementById("tab-todas").style.display = "none";
        document.getElementById("content-todas").style.display = "none";
        await renderMinhasSolicitacoes();
      }
    }

    renderSolicitacoes();

    if (userType === "2") {
      document.getElementById("tab-minhas").addEventListener("click", function () {
        this.classList.add("active");
        document.getElementById("tab-todas").classList.remove("active");
        document.getElementById("content-minhas").style.display = "block";
        document.getElementById("content-todas").style.display = "none";
      });
      document.getElementById("tab-todas").addEventListener("click", function () {
        this.classList.add("active");
        document.getElementById("tab-minhas").classList.remove("active");
        document.getElementById("content-minhas").style.display = "none";
        document.getElementById("content-todas").style.display = "block";
      });
    }

    const modal = document.getElementById("modal-new-solicitacao");
    document.getElementById("open-modal").addEventListener("click", function () {
      editSolicitacaoId = null;
      document.getElementById("modal-title").textContent = "Nova Solicitação";
      document.getElementById("salvar-solicitacao-btn").textContent = "Cadastrar Solicitação";
      document.getElementById("cadastro-solicitacao-form").reset();
      modal.style.display = "flex";
    });
    document.getElementById("close-modal").addEventListener("click", function () {
      modal.style.display = "none";
    });
    window.addEventListener("click", function (event) {
      if (event.target === modal) {
        modal.style.display = "none";
      }
    });
    document.getElementById("cadastro-solicitacao-form").addEventListener("submit", async function (event) {
      event.preventDefault();
      const descricao = document.getElementById("descricao").value;
      const tipo = document.getElementById("tipo").value;
      const status = document.getElementById("status").value;
      const novaSolicitacao = {
        descricao,
        tipo,
        status,
        associadoId: Number(currentUserId)
      };
      try {
        let response;
        if (editSolicitacaoId) {
          response = await fetch(`/solicitacoes/${editSolicitacaoId}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
              "Authorization": `Bearer ${token}`
            },
            body: JSON.stringify(novaSolicitacao)
          });
        } else {
          response = await fetch("/solicitacoes", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Authorization": `Bearer ${token}`
            },
            body: JSON.stringify(novaSolicitacao)
          });
        }
        const result = await response.json();
        if (response.ok) {
          alert(editSolicitacaoId ? "Solicitação atualizada com sucesso!" : "Solicitação cadastrada com sucesso!");
          this.reset();
          modal.style.display = "none";
          editSolicitacaoId = null;
          await renderSolicitacoes();
        } else {
          alert("Erro: " + result.message);
        }
      } catch (error) {
        alert("Erro ao salvar solicitação: " + error.message);
      }
    });
  });
</script>